--UZAIR MAJEED (23i-3063)
--SYED MUHAMMAD IJTABA RIZVI (23i-0112)
--DB LAB ITERATION 1
--SE-B

CREATE DATABASE Job_Fair

Use Job_Fair

CREATE TABLE USERS (
    user_ID INT PRIMARY KEY,
    Password VARCHAR(100) NOT NULL,
    Role VARCHAR(50) NOT NULL CHECK (Role IN ('Student', 'TPO', 'Recruiter','Coordinator')),
    Name VARCHAR(100) NOT NULL
);

CREATE TABLE USER_email (
    email VARCHAR(100) PRIMARY KEY CHECK (email LIKE '%@%.%'),
    user_ID INT NOT NULL,
    FOREIGN KEY(user_ID) REFERENCES USERS(user_ID) ON DELETE CASCADE
);

CREATE TABLE TPO (
    TPO_ID INT PRIMARY KEY,
    FOREIGN KEY(TPO_ID) REFERENCES USERS(user_ID) ON DELETE CASCADE
);

CREATE TABLE SKILL (
    skill_ID INT PRIMARY KEY,
    skill_Name VARCHAR(100) NOT NULL,
    skill_Level VARCHAR(50) NOT NULL CHECK (skill_Level IN ('Beginner', 'Intermediate', 'Advanced'))
);

CREATE TABLE STUDENT (
    student_ID INT PRIMARY KEY,
    FOREIGN KEY(student_ID) REFERENCES USERS(user_ID) ON DELETE CASCADE
);


CREATE TABLE STUDENT_SKILLS(
	student_ID INT,
	skill_ID INT,
	PRIMARY KEY(student_ID,skill_ID),
	FOREIGN KEY(student_ID) REFERENCES STUDENT(student_ID) ON DELETE CASCADE,
	FOREIGN KEY(skill_ID) REFERENCES SKILL(skill_ID) ON DELETE CASCADE
);


CREATE TABLE COORDINATOR (
    coordinator_ID INT PRIMARY KEY,
    FOREIGN KEY(coordinator_ID) REFERENCES USERS(user_ID) ON DELETE CASCADE
);


CREATE TABLE ACADEMIC_RECORD (
    student_ID INT PRIMARY KEY,
    GPA FLOAT CHECK (GPA BETWEEN 0.0 AND 4.0),
    Current_Semester INT CHECK (Current_Semester BETWEEN 1 AND 12),
    Degree_Program VARCHAR(100) NOT NULL,
    FOREIGN KEY(student_ID) REFERENCES STUDENT(student_ID) ON DELETE CASCADE
);

CREATE TABLE CERTIFICATION (
    Certificate_ID INT PRIMARY KEY,
    Organization VARCHAR(100) NOT NULL,
    Title VARCHAR(100) NOT NULL,
    certified_date DATE NOT NULL,
    student_ID INT NOT NULL,
    FOREIGN KEY(student_ID) REFERENCES STUDENT(student_ID) ON DELETE CASCADE
);


CREATE TABLE JOB_FAIR_EVENTS (
    eventID INT PRIMARY KEY,
    title VARCHAR(100) NOT NULL,
    date DATE NOT NULL,
    venue_location VARCHAR(100) NOT NULL,
    staff VARCHAR(100),
	scheduler_ID INT,
	
    FOREIGN KEY(scheduler_ID) REFERENCES TPO(TPO_ID) ON DELETE CASCADE
);


CREATE TABLE BOOTH (
    booth_ID INT PRIMARY KEY,
    location VARCHAR(100),
    eventID INT,
	coordinator_ID INT,
    FOREIGN KEY(coordinator_ID) REFERENCES COORDINATOR(coordinator_ID),
    FOREIGN KEY(eventID) REFERENCES JOB_FAIR_EVENTS(eventID) ON DELETE SET NULL
);

CREATE TABLE BOOTH_ASSIGNMENT (
    TPO_ID INT,
    booth_ID INT,
    PRIMARY KEY(TPO_ID, booth_ID),
    FOREIGN KEY(TPO_ID) REFERENCES TPO(TPO_ID) ON DELETE CASCADE,
    FOREIGN KEY(booth_ID) REFERENCES BOOTH(booth_ID) ON DELETE CASCADE
);

CREATE TABLE BOOTH_CHECKIN (
    checkIn_Time DATETIME PRIMARY KEY,
    student_ID INT,
    booth_ID INT,
    eventID INT,
    FOREIGN KEY(student_ID) REFERENCES STUDENT(student_ID) ,
    FOREIGN KEY(booth_ID) REFERENCES BOOTH(booth_ID) ,
    FOREIGN KEY(eventID) REFERENCES JOB_FAIR_EVENTS(eventID) 
);


CREATE TABLE BOOTH_MONITORING (
    TPO_ID INT,
    checkIn_Time DATETIME,
    PRIMARY KEY(TPO_ID, checkIn_Time),
    FOREIGN KEY(TPO_ID) REFERENCES TPO(TPO_ID) ON DELETE CASCADE,
    FOREIGN KEY(checkIn_Time) REFERENCES BOOTH_CHECKIN(checkIn_Time)
);


CREATE TABLE STUDENT_VERIFICATION (
    coordinator_ID INT,
    checkIn_Time DATETIME,
    PRIMARY KEY(coordinator_ID, checkIn_Time),
    FOREIGN KEY(coordinator_ID) REFERENCES COORDINATOR(coordinator_ID) ON DELETE CASCADE,
    FOREIGN KEY(checkIn_Time) REFERENCES BOOTH_CHECKIN(checkIn_Time)
);


CREATE TABLE BOOTH_TRACKING(
	booth_ID INT PRIMARY KEY,
	booth_Traffic INT,
	FOREIGN KEY(booth_ID) REFERENCES BOOTH(booth_ID) ON DELETE CASCADE,
);

CREATE TABLE COMPANY (
    company_ID INT PRIMARY KEY,
    Name VARCHAR(100) NOT NULL,
    sector VARCHAR(100),
    Street VARCHAR(100),
    booth_ID INT,
    FOREIGN KEY(booth_ID) REFERENCES BOOTH(booth_ID) ON DELETE SET NULL
);

CREATE TABLE COMPANY_Contact_No (
    Contact_No VARCHAR(11) PRIMARY KEY,
    company_ID INT NOT NULL,
    FOREIGN KEY(company_ID) REFERENCES COMPANY(company_ID) ON DELETE CASCADE
);

CREATE TABLE PARTICIPATION (
    eventID INT,
    company_ID INT,
    PRIMARY KEY(eventID, company_ID),
    FOREIGN KEY(eventID) REFERENCES JOB_FAIR_EVENTS(eventID) ON DELETE CASCADE,
    FOREIGN KEY(company_ID) REFERENCES COMPANY(company_ID) ON DELETE CASCADE
);

CREATE TABLE RECRUITER (
    recruiter_ID INT PRIMARY KEY,
    company_ID INT NOT NULL,
    FOREIGN KEY(recruiter_ID) REFERENCES USERS(user_ID) ON DELETE CASCADE,
    FOREIGN KEY(company_ID) REFERENCES COMPANY(company_ID) ON DELETE CASCADE
);

CREATE TABLE INTERVIEWS (
    interview_ID INT PRIMARY KEY,
    timeSlot DATETIME NOT NULL,
    status VARCHAR(50) NOT NULL CHECK (status IN ('Scheduled', 'Completed', 'Canceled')),
    recruiter_ID INT NOT NULL,
    student_ID INT NOT NULL,
    eventID INT NOT NULL,
    FOREIGN KEY(recruiter_ID) REFERENCES RECRUITER(recruiter_ID) ON DELETE CASCADE,
    FOREIGN KEY(student_ID) REFERENCES STUDENT(student_ID) ON DELETE NO ACTION,
    FOREIGN KEY(eventID) REFERENCES JOB_FAIR_EVENTS(eventID) ON DELETE NO ACTION
);




CREATE TABLE REVIEW (
    review_ID INT PRIMARY KEY,
    rating INT NOT NULL CHECK (rating BETWEEN 1 AND 5),
    student_ID INT NOT NULL,
    interview_ID INT UNIQUE NOT NULL,
    FOREIGN KEY(student_ID) REFERENCES STUDENT(student_ID) ON DELETE NO ACTION,
    FOREIGN KEY(interview_ID) REFERENCES INTERVIEWS(interview_ID) ON DELETE CASCADE
);



CREATE TABLE REVIEW_comments (
    comments VARCHAR(100) NOT NULL,
    review_ID INT PRIMARY KEY,
    FOREIGN KEY(review_ID) REFERENCES REVIEW(review_ID) ON DELETE CASCADE
);
CREATE TABLE JOB_POSTING (
    job_ID INT PRIMARY KEY,
    description TEXT,
    salary_Range VARCHAR(100),
    location_Preferences VARCHAR(100),
    Title VARCHAR(100) NOT NULL,
    deadline DATE NOT NULL,
    job_type VARCHAR(50) CHECK (job_type IN ('Full-Time', 'Internship')),
    company_ID INT,
    recruiter_ID INT,
    FOREIGN KEY(company_ID) REFERENCES COMPANY(company_ID) ON DELETE CASCADE,
    FOREIGN KEY(recruiter_ID) REFERENCES RECRUITER(recruiter_ID) ON DELETE NO ACTION,
);


CREATE TABLE JOB_SKILLS(
	skill_ID INT,
	job_ID INT,
	PRIMARY KEY(skill_ID,job_ID),
	FOREIGN KEY(skill_ID) REFERENCES SKILL(skill_ID) ON DELETE CASCADE,
	FOREIGN KEY(job_ID) REFERENCES JOB_POSTING(job_ID) ON DELETE CASCADE
);

CREATE TABLE APPLICATION (
    application_ID INT PRIMARY KEY,
    status VARCHAR(50) CHECK (status IN ('Pending', 'Accepted', 'Rejected')),
    applied_Date DATE NOT NULL,
    applicant_ID INT NOT NULL,
    job_ID INT NOT NULL,
    recruiter_ID INT NOT NULL,
    FOREIGN KEY(applicant_ID) REFERENCES STUDENT(student_ID) ON DELETE CASCADE,
    FOREIGN KEY(job_ID) REFERENCES JOB_POSTING(job_ID) ON DELETE CASCADE,
    FOREIGN KEY(recruiter_ID) REFERENCES RECRUITER(recruiter_ID) ON DELETE NO ACTION
);


CREATE TABLE JOB_SEARCH (
    student_ID INT,
    job_ID INT,
    PRIMARY KEY(student_ID, job_ID),
    FOREIGN KEY(student_ID) REFERENCES STUDENT(student_ID) ON DELETE CASCADE,
    FOREIGN KEY(job_ID) REFERENCES JOB_POSTING(job_ID) ON DELETE CASCADE
);


ALTER TABLE STUDENT
ADD isApproved BIT NOT NULL DEFAULT 0;

UPDATE STUDENT SET isApproved = 1

ALTER TABLE RECRUITER
ADD isApproved BIT NOT NULL DEFAULT 0;

UPDATE RECRUITER SET isApproved = 1


ALTER TABLE INTERVIEWS
ADD isHired BIT NOT NULL DEFAULT 0;



